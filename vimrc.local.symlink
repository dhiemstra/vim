set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set pastetoggle=<Leader>p
set background=dark
set hidden
color tomorrow-night
let g:neocomplcache_enable_at_startup = 1
let mapleader = "\<Space>"
let g:NERDTreeHijackNetrw=0

" Tab key behaviour
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

inoremap <tab> <c-r>=InsertTabWrapper()<cr>

map <Leader>' :s/\'\(.*\)\'/\"\1\"<CR>:nohl<CR>

" Delete buffer from open buffer list
let g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }

func! MyCtrlPMappings()
    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>
    " nmap <buffer> <silent> <C-k> :call <sid>DeleteBuffer()<cr>
endfunc

func! s:DeleteBuffer()
    let line = getline('.')
    let bufid = line =~ '\[\d\+\*No Name\]$' ? str2nr(matchstr(line, '\d\+'))
        \ : fnamemodify(line[2:], ':p')
    exec "bd" bufid
    exec "norm \<F5>"
endfunc

" Additional key maps
imap ii <Esc>
" imap ww <Esc>:w<CR>

map <Leader>t  :CtrlP<CR>
map <Leader>p  :CtrlP<CR>
map <Leader>f  :CtrlPClearCache<CR>
map <Leader>o  :CtrlP app/assets/javascripts/salonized<CR>
map <C-o>      :CtrlP app/assets/javascripts/salonized<CR>
map <Leader>h  :nohl<CR>
map <Leader>b  :CtrlPBuffer<CR>
map <Leader>g  :e#<CR>
map <Leader>w  :w<CR>
map <Leader>n  :call NumberToggle()<CR>
map <C-m>      :CtrlPFunky<CR>
nmap <CR> o<Esc>
nnoremap <silent> <C-l> :bn<CR>
nnoremap <silent> <C-h> :bp<CR>

map <Leader>sc :vsp db/schema.rb<CR>
map <Tab>      ==
imap <C-o>      <Plug>snipMateNextOrTrigger

" Anti RSI keys
" map ,w       :w<CR>
" nmap <space> :w<CR>

" Switching between buffers with arrow keys
nmap <silent> <C-e>k :wincmd k<CR>
nmap <silent> <C-e>j :wincmd j<CR>
nmap <silent> <C-e>h :wincmd h<CR>
nmap <silent> <C-e>l :wincmd l<CR>

" map <Leader>j      :wincmd j<CR>
" map <Leader>k      :wincmd k<CR>
" map <Leader>h      :wincmd h<CR>
" map <Leader>l      :wincmd l<CR>

map <C-k>      :wincmd j<CR>
map <C-h>      :wincmd h<CR>
map <C-l>      :wincmd l<CR>
map qq         :bp<CR>:bd #<CR>

" tab switching
" map <Leader>]  :tabn<CR>
" map <Leader>[  :tabp<CR>
" map <C-l>  :tabn<CR>
" map <C-h>  :tabp<CR>
